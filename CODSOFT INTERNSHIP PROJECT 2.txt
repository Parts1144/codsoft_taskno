import pandas as pd

IMPORTING THE DATASETS INTO OUR JUPYTER NOTEBOOK:

data=pd.read_csv(r"spam.csv",encoding=('ISO-8859-1'),low_memory=False )
data
data.drop(['Unnamed: 2','Unnamed: 3','Unnamed: 4'],axis=1,inplace=True)
data.head()
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
frequency= data['v1'].value_counts()
frequency
frequency.plot(kind='pie',ylabel="",startangle=90,autopct='%1.1f%%',colors=['red','blue'])
plt.show()

data.v1=[0 if value == 'ham' else 1 for value in data.v1]
data.head()
import matplotlib.pyplot as plt
X=data["v1"]
Y=data["v2"]


TOKENIZING THE DATA SET(CLEANING THE DATA):


def evacuation_lines(data):
    data=data.lower()
    #data=re.sub(r'@\S+','',data)
    data=re.sub(r"[^a-z A-Z+']",'',data)
    
    data=re.sub(r'http\S+', '',data)
    data=re.sub(r'\s+[a-zA-Z]\s+', ' ', data + ' ')
    #print(data)
    words_clean=nltk.word_tokenize(data)
    #print(words_clean)
    sw= nltk.corpus.stopwords.words('english')
    data= " ".join([i for i in words_clean if i not in sw and len(i) > 2])
    data=re.sub("\s[\s]+", " ", data).strip()  # Remove repeated/leading/trailing spaces
   
    return data
data['Updated_data']=data['v2'].apply(evacuation_lines)
data.head()

data.drop(['v2'],axis=1,inplace=True)



SPLITTING THE DATA SET INTO X AND Y :


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
tfidf_vectorizer = TfidfVectorizer()
t_matrix = tfidf_vectorizer.fit_transform(data['Updated_data'])
X_train, X_test, Y_train, Y_test = train_test_split(t_matrix, data['v1'], test_size=0.2, random_state=41)
Y_test

IMPLEMENTATION OF ML MODELS:


from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score 
from sklearn.metrics import classification_report
model_project2=LogisticRegression()
model_project2.fit(X_train,Y_train)
prediction=model_project2.predict(X_test)
accuracy_value=accuracy_score(Y_test,prediction)
classification=classification_report(Y_test,prediction)
print("Logistic Regression:\n ")
print ("the classification of the model is:", classification)
print ("the accuracy value is :", accuracy_value)


from sklearn.svm import SVC
model_sv=SVC()
model_sv.fit(X_train,Y_train)
predict_sv=model_sv.predict(X_test)
accuracy_value2=accuracy_score(Y_test,predict_sv)
classification2=classification_report(Y_test,predict_sv)
print("support vector machine classifier:\n ")
print ("the classification of the model is :", classification2)
print ("the accuracy value is :", accuracy_value2)


from sklearn.naive_bayes import MultinomialNB
Naive_Bay=MultinomialNB()
Naive_Bay.fit(X_train,Y_train)
predict3=Naive_Bay.predict(X_test)
accuracy_value3=accuracy_score(Y_test,predict3)
classification3=classification_report(Y_test,predict3)
print("Naive Bayes:\n ")
print ("the classification of the model is:", classification3)
print ("the accuracy value is :", accuracy_value3)






